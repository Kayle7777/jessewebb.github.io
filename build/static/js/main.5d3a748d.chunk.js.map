{"version":3,"sources":["components/RepoPanelItem.js","components/Frame.js","components/MainPanel.js","utils/gitHubGet.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","icon","transform","transition","transitions","create","easing","sharp","duration","enteringScreen","iconShift","complex","withTheme","props","classes","selectedRepo","selectRepo","repoData","index","name","description","readme","readme_url","url","createdAt","updatedAt","react_default","a","createElement","index_es","button","onClick","clickFunction","primary","slice","icons_index_es","className","display","drawer","Object","defineProperty","breakpoints","up","flexShrink","appBar","marginLeft","concat","menuButton","marginRight","toolbar","mixins","drawerPaper","content","flexGrow","padding","spacing","unit","_useState","useState","_useState2","slicedToArray","mobileOpen","navToggle","_props$children","toArray","children","listItems","rest","position","aria-label","variant","noWrap","smUp","implementation","container","anchor","direction","open","onClose","ModalProps","keepMounted","xsDown","MainPanel","compiler","text","gitHubGet","graphql","_graphql","asyncToGenerator","regenerator_default","mark","_callee2","schema","axiosGitHubGraphQL","result","wrap","_context2","prev","next","axios","baseURL","headers","Authorization","process","method","data","query","sent","abrupt","t0","console","log","stop","this","_x2","apply","arguments","repoSchema","pinnedRepoSchema","ownerSchema","API","owner","repos","pinnedRepos","gitData","setRepos","_useState3","_useState4","fetchData","_ref","_callee","_repos$data$viewer$re","_ref2","_ref3","i","_context","Promise","all","viewer","repositories","nodes","filter","e","pinnedRepositories","edges","map","each","node","includes","unshift","toConsumableArray","reverse","useEffect","Fragment","components_Frame","components_RepoPanelItem","key","id","components_MainPanel","App","pages_Main","Boolean","window","location","hostname","match","createMuiTheme","type","ReactDOM","render","core_styles","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d3a748d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { ListItem, ListItemIcon, ListItemText, Divider } from '@material-ui/core';\r\nimport { ArrowForwardIos as PlayArrow } from '@material-ui/icons';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    icon: {\r\n        transform: 'rotate(180deg)',\r\n        transition: theme.transitions.create(['transform'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    iconShift: {\r\n        transform: 'rotate(0deg)',\r\n        transition: theme.transitions.create(['transform'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.complex,\r\n        }),\r\n    },\r\n});\r\n\r\nconst RepoPanelItem = props => {\r\n    const { classes, selectedRepo, selectRepo, repoData, index } = props;\r\n    const clickFunction = index => {\r\n        if (index === selectedRepo) {\r\n            selectRepo(null);\r\n        } else selectRepo(index);\r\n    };\r\n    const { name, description, readme, readme_url, url, createdAt, updatedAt } = repoData;\r\n    return (\r\n        // expanded={expanded === 'panel1'} onChange={this.handleChange('panel1')}\r\n        <ListItem button onClick={() => clickFunction(index)}>\r\n            <ListItemText primary={repoData.name.slice(0, 12) + '...'} />\r\n            <ListItemIcon>\r\n                <PlayArrow className={selectedRepo == index ? classes.iconShift : classes.icon} />\r\n            </ListItemIcon>\r\n        </ListItem>\r\n    );\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(RepoPanelItem);\r\n\r\n// { Sample repoData\r\n// createdAt: \"2018-07-07T17:47:17Z\"\r\n// description: null\r\n// id: 140105585\r\n// name: \"nytClassProject\"\r\n// readme: null\r\n// readme_url: null\r\n// updatedAt: \"2018-07-07T18:24:10Z\"\r\n// url: \"https://github.com/Kayle7777/nytClassProject\"\r\n// }\r\n","import React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { AppBar, Toolbar, Typography, IconButton, Hidden, Divider, Drawer } from '@material-ui/core';\nimport { Menu as MenuIcon } from '@material-ui/icons';\n\nconst drawerWidth = 240;\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n    },\n    drawer: {\n        [theme.breakpoints.up('sm')]: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n    },\n    appBar: {\n        marginLeft: drawerWidth,\n        [theme.breakpoints.up('sm')]: {\n            width: `calc(100% - ${drawerWidth}px)`,\n        },\n    },\n    menuButton: {\n        marginRight: 20,\n        [theme.breakpoints.up('sm')]: {\n            display: 'none',\n        },\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing.unit * 3,\n    },\n});\n\nconst Frame = props => {\n    const { classes, theme } = props;\n    const [mobileOpen, navToggle] = useState(false);\n    const [listItems, ...rest] = props.children;\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <IconButton\n                        aria-label=\"Open Drawer\"\n                        onClick={() => navToggle(!mobileOpen)}\n                        className={classes.menuButton}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Nav\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <nav className={classes.drawer}>\n                <Hidden smUp implementation=\"css\">\n                    {/* This is the variant temp for mobile section */}\n                    <Drawer\n                        container={props.container}\n                        variant=\"temporary\"\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                        open={mobileOpen}\n                        onClose={() => navToggle(!mobileOpen)}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true,\n                        }}\n                    >\n                        <div className={classes.toolbar} />\n                        <Divider />\n                        {listItems}\n                    </Drawer>\n                </Hidden>\n                <Hidden xsDown implementation=\"css\">\n                    {/* This is the perma section */}\n                    <Drawer\n                        variant=\"permanent\"\n                        open\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                    >\n                        <div className={classes.toolbar} />\n                        <Divider />\n                        {listItems}\n                    </Drawer>\n                </Hidden>\n            </nav>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                {rest}\n            </main>\n        </div>\n    );\n};\n\nexport default withStyles(styles, { withTheme: true })(Frame);\n","import React from 'react';\r\nimport { compiler } from 'markdown-to-jsx';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\n\r\nconst MainPanel = props => {\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Typography>{props.readme !== null && compiler(props.readme.text)}</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default MainPanel;\r\n","import axios from 'axios';\n\nconst readme = url => `https://raw.githubusercontent.com/${url.replace(/^.*\\.com\\//, '')}/master/README.md`;\nconst tryReadme = async url => {\n    try {\n        let data = await axios.get(readme(url));\n        return { url: url, data: data.data };\n    } catch (err) {\n        return { url: null, data: null };\n    }\n};\n\nexport default {\n    // new github v4 API, using graphQL\n    // when express hits /api/gitHub/graphql\n    graphql: async schema => {\n        const axiosGitHubGraphQL = axios.create({\n            baseURL: 'https://api.github.com/graphql',\n            headers: {\n                Authorization: `bearer ${process.env.REACT_APP_GITHUB_API_TOKEN}`,\n            },\n        });\n        try {\n            const result = await axiosGitHubGraphQL({\n                url: '',\n                method: 'post',\n                data: {\n                    // This really should be in a separate .gql file\n                    query: schema,\n                },\n            });\n            return result.data;\n        } catch (err) {\n            console.log(err);\n        }\n    },\n    repoSchema: `{\n        viewer {\n            repositories(last: 30, orderBy: {field: UPDATED_AT, direction: DESC}) {\n                nodes {\n                    name\n                    createdAt\n                    updatedAt\n                    pushedAt\n                    description\n                    id\n                    url\n                    readme: object(expression: \"master:README.md\") {\n                        ... on Blob {\n                            text\n                        }\n                    }\n                }\n            }\n        }\n    }`,\n    pinnedRepoSchema: `{\n        viewer {\n            pinnedRepositories(last: 4) {\n                edges {\n                    node {\n                        name\n                        createdAt\n                        updatedAt\n                        pushedAt\n                        description\n                        id\n                        url\n                        readme: object(expression: \"master:README.md\") {\n                            ... on Blob {\n                                text\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }`,\n    ownerSchema: `{\n        viewer {\n            bio\n            createdAt\n            email\n            isHireable\n            login\n            location\n            name\n            url\n            updatedAt\n            company\n        }\n    }`,\n};\n","import React, { useState, useEffect } from 'react';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport { List, Typography, Grid } from '@material-ui/core';\nimport RepoPanelItem from '../components/RepoPanelItem';\nimport Frame from '../components/Frame';\nimport MainPanel from '../components/MainPanel';\nimport API from '../utils/gitHubGet';\nconst { graphql, repoSchema, pinnedRepoSchema, ownerSchema } = API;\n\nconst styles = theme => ({\n    toolbar: theme.mixins.toolbar,\n});\n\nconst Main = props => {\n    const [gitData, setRepos] = useState({ owner: {}, repos: [], pinnedRepos: [] });\n    const [selectedRepo, selectRepo] = useState(null);\n\n    const fetchData = async () => {\n        // Implement localhost caching here once ready\n        let [repos, owner, pinnedRepos] = await Promise.all([\n            graphql(repoSchema),\n            graphql(ownerSchema),\n            graphql(pinnedRepoSchema),\n        ]);\n        repos.data.viewer.repositories.nodes = repos.data.viewer.repositories.nodes.filter(e => {\n            let test = pinnedRepos.data.viewer.pinnedRepositories.edges.map(each => each.node.name);\n            return !test.includes(e.name);\n        });\n        pinnedRepos = pinnedRepos.data.viewer.pinnedRepositories.edges.map(e => e.node);\n        repos.data.viewer.repositories.nodes.unshift(...pinnedRepos.reverse());\n        // Correctly set the state to OBJECT owner, ARRAY repos, ARRAY pinnedRepos\n        setRepos({\n            owner: owner.data.viewer,\n            repos: repos.data.viewer.repositories.nodes,\n            pinnedRepos: pinnedRepos,\n        });\n        for (let i in repos.data.viewer.repositories.nodes) {\n            if (repos.data.viewer.repositories.nodes[i].name === 'kayle7777.github.io') selectRepo(i);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, gitData);\n\n    return (\n        <>\n            <Frame>\n                <List className={props.classes.toolbar}>\n                    {gitData.repos.map((repoData, index) => {\n                        return (\n                            <RepoPanelItem\n                                selectedRepo={selectedRepo}\n                                selectRepo={selectRepo}\n                                repoData={repoData}\n                                index={index}\n                                key={repoData.id}\n                            />\n                        );\n                    })}\n                </List>\n                {gitData.repos[selectedRepo] && <MainPanel readme={gitData.repos[selectedRepo].readme} />}\n            </Frame>\n        </>\n    );\n};\n\nexport default withStyles(styles, { withTheme: true })(Main);\n","import React from 'react';\nimport Main from './pages/Main';\n\nconst App = () => {\n    return (\n        <>\n            <Main />\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { CssBaseline } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n    },\n});\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n    </MuiThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}